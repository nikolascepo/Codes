package VJEZBA;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.HashSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class Main {

    
    public static void main(String[] args) {
        
        ArrayList<String> arr = new ArrayList<>();         //*****Create List Array*****
        
        arr.add("red"); 
        arr.add("blue");
        arr.add("yellow");
        arr.add("green");
               
        System.out.println("elements in an array: "+arr);
        
        arr.forEach(element -> {
            //******For loop za listanje svakog elementa u array*****
            System.out.println("List all elements individually: "+element);
        });
        
        arr.add(0,"onion");             //*******Insert element on a specified place in an array******
        System.out.println("change element value: "+arr); 
        
        System.out.println("print only 2nd inedx element: "+arr.get(2));         //*******retrieve a slecific value*******
        
        arr.remove(3);
        System.out.println("removed 3rd index element: "+(arr));            //****remove a value****
        
        Collections.sort(arr);         //***SORT an array*****
        System.out.println("Sorted array: "+arr);
        
        ArrayList<String> arr_cp = new ArrayList<>();
        
        arr_cp.add("cat");
        arr_cp.add("shiba");
        arr_cp.add("doge");
        arr_cp.add("mjau");
        
        Collections.copy(arr, arr_cp);      //*****copy values of the second array into the first array*****
        System.out.println("Changed array: "+arr);
        System.out.println("The second array: "+arr_cp);
        
        Collections.sort(arr_cp);
        System.out.println("Sorted array: "+arr_cp);
        Collections.reverse(arr_cp); //****reversed elements***
        System.out.println("Reversed: "+arr_cp);
        Collections.shuffle(arr_cp);       //***Shuffle elements***
        System.out.println("Shufflede array: "+arr_cp);
        
        List<String> sub_arr = arr.subList(0, 2); //****Extract portion of an array***
        System.out.println("extracted portion: "+sub_arr);
        
        /*
        ArrayList<String> compare = new ArrayList<>();
        for (String e: arr){
            compare.add(arr.contains(e) ? "yes" : "no");
            System.out.println("Compared vauels: "+compare);
            */
                
        Collections.swap(arr, 0, 3); //**Swap two elements in an array***
            System.out.println("Swapped: "+arr);
       
        
        ArrayList<String> arrs = new ArrayList<>(); 
        
        arrs.addAll(arr);        //***add all arrays together***
        arrs.addAll(arr_cp);
        System.out.println("combined arrays: "+arrs);
       
        arr.removeAll(arr);
        arr.add("red"); 
        arr.add("blue");
        arr.add("yellow");
        arr.add("green");
        
        System.out.println(arr);
        
        arrs.addAll(0, arr);        //***putting array on a specific place***
        System.out.println("Inserted: "+arrs);
        
        
        arrs.removeAll(arrs);       //***Remove all objects from an array***
        System.out.println("Empty arrs: "+arrs);
        
        arrs.add("nikola");
        arrs.add("milos");
        arrs.add("marko");
        System.out.println("New arrs: "+arrs);
        
        arrs.set(0, "stefan");          //***switching value of a certain index***
        arrs.set(1,"janko");
        System.out.println("New arrs: "+arrs);
       
        ///////////////////LINKED LISTS////////LINKED LISTS///////////////////////
        ///////////////////LINKED LISTS////////LINKED LISTS///////////////////////
        ///////////////////LINKED LISTS////////LINKED LISTS///////////////////////
        ///////////////////LINKED LISTS////////LINKED LISTS///////////////////////
           
        
        LinkedList<String> list1 = new LinkedList<>();
        
        list1.add("chair");
        list1.add("table");
        list1.add("cup");
        list1.add("plate");
        
       
        list1.forEach(e -> {
            System.out.println("Iterate through elements: "+e);
        });
        
               
        Iterator i = list1.listIterator(0);
        
        while (i.hasNext()) {           //*****list elements***
            System.out.println("HasNext list loop: "+i.next());
        }
        
        Iterator it = list1.descendingIterator(); //****reverse order*****
        while (it.hasNext()) {
                   System.out.println("Reverse: "+it.next());
            
        }              
        list1.offerFirst("food"); //***add first element***
        list1.offerLast("water"); //***add last element***
        
        System.out.println("First and last added: "+list1);
        
        System.out.println("Return first and last elements: "+list1.getFirst()+", "+list1.getLast());
        
        list1.set(0, "junk");
        
        System.out.println("Get first value changed: "+list1.getFirst());
        
        ///////////////////HASH SET////////HAST SET///////////////////////        4
        ///////////////////HASH SET////////HAST SET///////////////////////
        ///////////////////HASH SET////////HAST SET///////////////////////
        ///////////////////HASH SET////////HAST SET///////////////////////

        HashSet<String> hash_set = new HashSet<>();
        
        hash_set.add("element1");
        hash_set.add("element2");
        hash_set.add("element3");
        hash_set.add("element4");

        System.out.println("hash_set: "+hash_set);   //****does not return duplicate values!!!!****
        
        Iterator<String> h1 = hash_set.iterator();
        
        while (h1.hasNext()) {          //***print all elements one by one***
            System.out.println("print hash_set elements one by one: "+h1.next());
        }
        System.out.println("Number of elements in a hash set: "+hash_set.size()); //***Number of elements***
        
        
        ///////////////////HASH MAP////////HAST MAP///////////////////////
        ///////////////////HASH MAP////////HAST MAP///////////////////////
        ///////////////////HASH MAP////////HAST MAP///////////////////////
        ///////////////////HASH MAP////////HAST MAP///////////////////////
        
        HashMap<String, Integer> person = new HashMap<>();
        
        person.put("Nikola", 22);
        person.put("Milos", 25);
        person.put("Marko", 23);
        person.put("Janko", 22);
        
        System.out.println("Key: "+person.keySet()+" Value: "+person.values());         //***return separate key and value values***
        person.keySet().forEach(m -> {                       //***define a for loop as long as there are different key indexes***
           System.out.println("Name: "+m+" Age: "+person.get(m));       //***return first m value as a keySet value, then value of a keySet***
        });
        
        HashMap<Integer,String> hm = new HashMap<>();
        
        hm.put(1,"nikola");
        hm.put(2,"milos");
        hm.put(3,"marko");
        hm.put(4,"janko");
        
        hm.entrySet().forEach(x -> { //-------->> ***********FOR EACH LOOP USING LAMBDA **********
            System.out.println("Hm map key: "+x.getKey()+" value: "+x.getValue());
        });
        
        HashMap<Integer,String> hm_cp = new HashMap<>();
                
        hm_cp.putAll(hm);//------------>>> Copies everything from one map to another
        System.out.println(hm_cp);
        
        boolean ie = hm_cp.isEmpty(); //---------->>> Checks if its empty
        System.out.println("Empty? "+ie);
        hm_cp.clear();//---------->> clear all map keys and vaules*!*!*!
        ie = hm_cp.isEmpty();
        System.out.println("Empty? "+ie);
        
        boolean check = hm.containsKey(4);//------>>>> checking for specified key
        System.out.println("Has 4? "+check);
        
        for (int d=0; d<3; d++){
            boolean check1 = hm.containsKey(d);
            System.out.println("Key value: "+d+" present? "+check1);
        }
        
        hm_cp.put(1,"red");
        hm_cp.put(2,"green");
        hm_cp.put(3,"blue");
        hm_cp.put(4,"black");
        
        Set set = hm_cp.entrySet();//-------->>> create a set of map values
        
        
        System.out.println("Set: "+set);
    
        
        System.out.println("Got key 3: "+hm_cp.get(3)); //--------->> get a key value
        
        Set key_set = hm_cp.keySet();//------->> get a set of keys in a map*!*!*
        
        System.out.println("Key set: "+key_set);
        
        Collection set_value = hm_cp.values();
        
        System.out.println(set_value);
        
       
       
      LinkedHashSet<String> list = new LinkedHashSet<>();
      
      list.add("Nikola");
      list.add("Milos");
      list.add("Ana");
      list.add("Jovan");
      list.add("Goran");
      
      TreeSet<String> srt = new TreeSet<>(list); // ------> Trees are used to sort sets !!!!
      
      srt.forEach(e -> {System.out.println("Sorted by alphabeth: "+e);} );
      
        
    }         
}
